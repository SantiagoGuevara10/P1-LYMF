/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi


 **/


options 
{
  
	LOOKAHEAD=2; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;


import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.List;

@SuppressWarnings("serial")
public class Robot 
{


	private RobotWorldDec world;
	private HashMap<String, Integer> variables = new HashMap<String, Integer>();
	
	boolean canMove(String direction) {
    Point currentPos = world.getPosition();
    Point newPos;
    switch (direction) {
        case "north":
            newPos = new Point(currentPos.x, currentPos.y - 1);
            break;
        case "south":
            newPos = new Point(currentPos.x, currentPos.y + 1);
            break;
        case "east":
            newPos = new Point(currentPos.x + 1, currentPos.y);
            break;
        case "west":
            newPos = new Point(currentPos.x - 1, currentPos.y);
            break;
        default:
            throw new RuntimeException("Invalid direction");
    }

    
    if (newPos.x < 1 || newPos.x > world.getN() || newPos.y < 1 || newPos.y > world.getN()) {
        return false; 
    }

    return !world.isBlocked(newPos); 
}
	public void faceDirection(String direction) {
    switch (direction) {
        case ":north":
            while(!world.facingNorth()) world.turnRight();
            break;
        case ":south":
            while(!world.facingSouth()) world.turnRight();
            break;
        case ":east":
            while(!world.facingEast()) world.turnRight();
            break;
        case ":west":
            while(!world.facingWest()) world.turnRight();
            break;
    }
}

	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String salida=new String();
}
PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
	| "\n"
}

TOKEN: 
{
    < MOV: "Mov" >
  | < RIGHT: "RIGHT" >
  | < PUT: "Put" >
  | < PICK: "Pick" >
  | < POP: "Pop" >
  | < GO: "GO" >
  | < HOP: "HOP" >
  | < DEFVAR: "defvar" >
  | < IF: "if" >
  | < THEN: "then" >
  | < ELSE: "else" >
  | < LOOP: "loop" >
  | < REPEAT: "repeat" >
  | < TURN: "turn" >
  | < FACE: "face" >
  | < CMD_SKIP: "skip" > 
  | < MOVEDIR: "move-dir" >
  | < RUNDIRS: "run-dirs" >
  | < MOVEFACE: "move-face" >
  | < NULL: "null" >
  | < ASSIGN: "=" >
  | < SEMICOLON: ";" >
  | < NAME : "Mov"| "Right" | "Put" | "Pick" | "Pop" |"GO" | "HOP" >
  | < FACING: "facing" >
  | < BLOCKED: "blocked?" >
  | < CANPUT: "can-put?" >
  | < CANPICK: "can-pick?" >
  | < CANMOVE: "can-move?" >
  | < ISZERO: "isZero?" >
  | < NOT: "not" >
  
}

TOKEN: 
{
    < BALLOONS:":balloons" >
  | < CHIPS:":chips"  >
  | < OBJECTYPE:"chips" | "balloons" >
  
  | < DIRECTION: ":left" | ":right" | ":around" | ":back" |":front" |":up" |":down">
  | < ORIENTATION: ":north" | ":south" | ":east" | ":west" >
  
  
}

TOKEN:
{
    < DIM: "dim" >
  | < MYXPOS: "myXpos" >
  | < MYYPOS: "myYpos" >
  | < MYCHIPS: "myChips" >
  | < MYBALLOONS: "myBalloons" >
  | < BALLOONSHERE: "balloonsHere" >
  | < CHIPSHERE: "chipsHere" >
  | < SPACES: "spaces" >
  | < NUM: (<DIGIT>)+ >
  | < #DIGIT: ["0"-"9"] >
  | < IDENTIFIER: ["a"-"z", "A"-"Z"] (<DIGIT> | ["a"-"z", "A"-"Z"])* >
}



	
	boolean command(Console sistema):
{   
    int x, y;
    String salida = new String(); 
}
{
    (
      (
        
       <RIGHT> "(" ")" {
           world.turnRight(); 
           salida = "Command: Turn right executed.";
       }
    |   <MOV>  "(" x=num() ")" {
           world.moveForward(x, false); 
           salida = "Command: Move forward " + x + " steps executed.";
       }
    |   <HOP>  "(" x=num() ")" {
           world.moveForward(x, true); 
           salida = "Command: Jump forward " + x + " steps executed.";
       }
    |   <GO>  "(" x=num() "," y=num()")" {
           world.setPostion(x,y);
           salida = "Command: Attempt to GO to (" + x + ", " + y + ") received.";
       }
   
    |   <POP> "(" x=num() ")" {
           world.popBalloons(x); 
           salida = "Command: Pop " + x + " balloons executed.";
       }
    |  "("< CMD_SKIP >  x=num() ")" {
           world.moveForward(x, true); 
           salida = "Command: Jump forward " + x + " steps executed.";
       }
    |   defVar() {
           
       }
    |   asignVar() {
           
       }
    |   turn() {
           
       }
    |   face() {
           
       }
	| put(){
	
	   }
	| moveDir(){
	
	   }
	| runDirs(){
	
	   }
	| moveFace(){
	
	   }
	| facingCondition(){
	
	   }
	| pick(){
	
	}
    | canMove(){
	
	}
	| isZero(){
	
	}

	| isBlockedCondition(){
	
	}


	| canPickCondition(){
	
	}
	

	| canPutCondition(){
	
	}
	
	

	| notCondition(){
	
	}
	

       
    ) ";" {
        return true;
    })+
    | <EOF> {return false;} 
}



void put() :
{
    int f = 0; 
    Token x;
}
{
    "(" <PUT> (x=<CHIPS> | x=<BALLOONS>) f=num() ")"
    {
        if (x.kind == CHIPS) {
            world.putChips(f); 
            salida = "Command: Put " + f + " chips executed.";
        } else if (x.kind == BALLOONS) {
            world.putBalloons(f); 
            salida = "Command: Put " + f + " balloons executed.";
        }
    }
}
void pick() :
{
    int f = 0; 
    Token x;
}
{
    "(" <PICK> (x=<CHIPS> | x=<BALLOONS>) f=num() ")"
    {
        if (x.kind == CHIPS) {
            world.pickChips(f); 
        salida = "Command: Picked " + f + " chips executed.";
        } else if (x.kind == BALLOONS) {
            world.grabBalloons(f); 
        salida = "Command: Picked " + f + " balloons executed.";
        }
    }
}

    
void defVar() throws Error:
{
    Token varName;
    int value;
}
{
    "(" <DEFVAR> varName=tokenEspecial() value=varOrNum() ")" {
        String varNameStr = varName.image;
        if (variables.containsKey(varNameStr)) {
            throw new Error("Variable " + varNameStr + " is already defined.");
        }
        variables.put(varNameStr, value);
        salida = "Variable " + varNameStr + " defined with value: " + value;
    }
}

Token tokenEspecial() : 
{
    Token token;
}
{
    (
        token = <IDENTIFIER>
      | token = <RIGHT>
      | token = <PUT>
      | token = <PICK>
      | token = <POP>
      | token = <HOP>
      | token = <GO>
      | token = <CMD_SKIP>
      | token = <MOV> 
      
    )
    { return token; }
}
String identifier():
{
    Token t;
}
{
    t=<IDENTIFIER> { return t.image; }
}

int varOrNum() throws Error:
{
    int total = 0;
    String variable;
}
{
    (<IDENTIFIER> {
        variable = token.image;
        if (variables.containsKey(variable)) {
            total = variables.get(variable);
        } else {
            throw new Error("La variable '" + variable + "' no existe.");
        }
        return total;
    }
    | <NUM> {
        try {
            total = Integer.parseInt(token.image);
        } catch (NumberFormatException ee) {
            throw new Error("Number out of bounds: " + token.image + "!!");
        }
        return total;
    })
}
void asignVar():
{
    Token varName;
    int value;
}
{
  "(" < ASSIGN > varName=tokenEspecial() value=varOrNum() ")"  {
    String varNameStr = varName.image;
        if (variables.containsKey(varNameStr)) {
            throw new Error("Variable " + varNameStr + " is already defined.");
        }
        variables.put(varNameStr, value);
        salida = "Variable " + varNameStr + " defined with value: " + value;
    }
}

void turn():
{
	Token dir;
}
{
    "(" <TURN> dir=<DIRECTION> ")"
    { if (dir.image.equals(":left")) {
    world.turnRight();
    world.turnRight();
    world.turnRight();
} else if (dir.image.equals(":right")) {
    world.turnRight();
} else if (dir.image.equals(":around")) {
    world.turnRight();
    world.turnRight();
  }
}
}
void face(): 
{
    Token direction;
}
{
    "(" <FACE> direction=<ORIENTATION>")"
    {
        switch (direction.image) {
            case ":north":
                faceDirection(RobotWorld.NORTH);
                break;
            case ":south":
                faceDirection(RobotWorld.SOUTH);
                break;
            case ":east":
                faceDirection(RobotWorld.EAST);
                break;
            case ":west":
                faceDirection(RobotWorld.WEST);
                break;
        }
    }
}   


void faceDirection(int targetDirection): 
{
}
{
    {
        
        while(true) {
            if ((targetDirection == RobotWorld.NORTH && world.facingNorth()) ||
                (targetDirection == RobotWorld.SOUTH && world.facingSouth()) ||
                (targetDirection == RobotWorld.EAST && world.facingEast()) ||
                (targetDirection == RobotWorld.WEST && world.facingWest())) {
                break;
            } else {
                world.turnRight();
            }
        }
    }
}

void moveDir():
{
    int n = 0;
    Token dir;
    int originalFacing;
}
{
    "(" <MOVEDIR> n=num() dir=<DIRECTION> ")"{
        originalFacing = world.getFacing(); 
        switch (dir.image) {
            case ":front":
       
                break;
            case ":right":
            
                world.turnRight();
                world.moveForward(n, false);
                restoreOriginalFacing(originalFacing);
                break;
            case ":left":
           
                world.turnRight();
                world.turnRight();
                world.turnRight();
                world.moveForward(n, false);
                restoreOriginalFacing(originalFacing);
                break;
            case ":back":
               
                world.turnRight();
                world.turnRight();
                world.moveForward(n, false);
                restoreOriginalFacing(originalFacing);
                break;
        }
    }
}


void restoreOriginalFacing(int originalFacing): 
{
}
{
    {
      
        while (world.getFacing() != originalFacing) {
            world.turnRight();
        }
        
    }
}
void moveFace() : 
{
    int steps;
    Token direction;
    Token stepsToken; 
}
{
    "(" <MOVEFACE> stepsToken=<NUM> direction=<ORIENTATION> ")"
    {
       
        steps = Integer.parseInt(stepsToken.image);
        
       
        faceDirection(direction.image);

       
        for(int i = 0; i < steps; i++) {
            world.moveForward(1, false); 
        }
    }
}
void runDirs() :
{
    List<Token> directions = new ArrayList<>();
    Token dir;
    int originalFacing;
}
{
   "(" <RUNDIRS> (dir=<DIRECTION> { directions.add(dir); } ( dir=<DIRECTION> { directions.add(dir); } )*) ")"
    {
        originalFacing = world.getFacing(); 
        
        
        for (Token direction : directions) {
            switch (direction.image) {
                case ":front":
                    world.moveForward(1, false); 
                    break;
                case ":right":
                    world.turnRight();
                    world.moveForward(1, false); 
                    world.turnRight(); world.turnRight(); world.turnRight(); 
                    break;
                case ":left":
                    world.turnRight(); world.turnRight(); world.turnRight(); 
                    world.moveForward(1, false); 
                    world.turnRight(); 
                    break;
                case ":back":
                    world.turnRight(); world.turnRight(); 
                    world.moveForward(1, false); 
                    world.turnRight(); world.turnRight(); 
                    break;
            }
        }
        
        
        while (world.getFacing() != originalFacing) {
            world.turnRight();
        }
    }
}

void nullCommand() : 
{
}
{
   "(" <NULL> ")"
}

int value() :
{
    Token t;
    int val = 0;
}
{
    t = <NUM> { return Integer.parseInt(t.image); }
  |
    t = <IDENTIFIER> {
     
        Integer value = variables.get(t.image);
        if (value != null) {
            return value;
        } else {
            
            throw new ParseException("Variable \"" + t.image + "\" no definida.");
        }
    }
  |
    t = <DIM> { return world.getN(); }
  |
    t = <MYXPOS> { return world.getPosition().x; }
  |
    t = <MYYPOS> { return world.getPosition().y; }
  |
    t = <MYCHIPS> { return world.getMyChips(); }
  |
    t = <MYBALLOONS> { return world.getMyBalloons(); }
  |
    t = <BALLOONSHERE> { return world.countBalloons(); }
  |
    t = <CHIPSHERE> { return world.chipsToPick(); }
  |
    t = <SPACES> { return world.freeSpacesForChips(); }
}

boolean facingCondition() : 
{
    Token direction;
}
{
    "(" <FACING> "?" direction=<ORIENTATION> ")" 
    {
        switch(direction.image) 
        {
            case ":north":
                return world.facingNorth();
            case ":south":
                return world.facingSouth();
            case ":east":
                return world.facingEast();
            case ":west":
                return world.facingWest();
            default:
                throw new ParseException("Unknown direction: " + direction.image);
        }
    }
}
      
boolean canMove() : 
{
    Token direction;
}
{
    "(" <CANMOVE> direction=<ORIENTATION> ")" 
    {
        switch(direction.image) 
        {
            case ":north":
                return canMove("north");
            case ":south":
                return canMove("south");
            case ":east":
                return canMove("east");
            case ":west":
                return canMove("west");
            default:
                throw new ParseException("Unknown direction: " + direction.image);
        }
    }
}


boolean isZero() : 
{
    int value;
}
{
    "(" <ISZERO> value=value() ")" 
    {
        return value == 0;
    }
}

boolean isBlockedCondition() :
{
    Point currentPosition, nextPosition;
    boolean result = false;
}
{
    "(" <BLOCKED> ")"
    {
        currentPosition = world.getPosition();
        int facing = world.getFacing();
       
        nextPosition = new Point(currentPosition.x, currentPosition.y);

        if (facing == RobotWorld.NORTH) {
            nextPosition.y -= 1; 
        } else if (facing == RobotWorld.SOUTH) {
            nextPosition.y += 1; 
        } else if (facing == RobotWorld.EAST) {
            nextPosition.x += 1; 
        } else if (facing == RobotWorld.WEST) {
            nextPosition.x -= 1;
        }

       
        if(nextPosition.x < 1 || nextPosition.x > world.getN() || nextPosition.y < 1 || nextPosition.y > world.getN()) {
            result = true; 
            System.out.println("El camino esta bloqueado.");
        } else {
          
            result = world.isBlocked(nextPosition);
            if(result) {
                System.out.println("El camino esta bloqueado.");
            } else {
                System.out.println("El camino esta libre");
            }
        }
        { return result; }
    }
}


boolean canPutCondition() :
{
    Token x;
    int n;
    boolean result = false;
}
{
    "(" <CANPUT> x= < OBJECTYPE> n=value() ")"
    {
        if ("chips".equalsIgnoreCase(x.image)) {
       
            result = (world.freeSpacesForChips() >= n);
        } else if ("balloons".equalsIgnoreCase(x.image)) {
            
            result = (world.getMyBalloons() >= n);
        }
        { return result; }
    }
}


boolean canPickCondition() :
{
    Token x;
    int n;
    boolean result = false;
}
{
    "(" <CANPICK> x=<OBJECTYPE> n=value() ")"
    {
        if ("chips".equalsIgnoreCase(x.image)) {

            result = (world.chipsToPick() >= n);
        } else if ("balloons".equalsIgnoreCase(x.image)) {
        
            result = (world.countBalloons() >= n);
        }
        { return result; }
    }
}


boolean condition() :
{
    
    boolean result = false;
}
{
    
    { return result; }
}

boolean notCondition() :
{
    boolean condResult = false;
}
{
    "(" <NOT> condResult=condition() ")"
    {
        return !condResult;
    }
}


	/**
	 * Unsigned decimal number
	 * @return the corresponding value of the string
	 * @error  corresponding value is too larges
	 */

	int num() throws Error:
	{	
		int total=1;
	}
	{
		<NUM>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				throw new Error("Number out of bounds: "+token.image+" !!");
			}
			return total;
		}
	}

























	
	  

	